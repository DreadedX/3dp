#version 150 core

struct Material {
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
    float shininess;
};

struct Light {
    vec3 position;
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
};

in vec3 FragPosition;
in vec3 Normal;
in vec2 Texcoord;

out vec4 color;

uniform Material material;
uniform Light light;
uniform vec3 viewPosition;
uniform sampler2D tex;

void main() {

    float ambientStrength = 0.1f;
    float specularStrength = 0.5f;

    // Ambient
    vec3 ambient = light.ambient * material.ambient;

    // Diffuse
    vec3 norm = normalize(Normal);
    vec3 lightDir = normalize(light.position - FragPosition);
    float diff = max(dot(norm, lightDir), 0.0);
    vec3 diffuse =  light.diffuse * (diff * material.diffuse);

    // Specular
    vec3 viewDir = normalize(viewPosition - FragPosition);
    vec3 reflectDir = reflect(-lightDir, norm);
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);
    vec3 specular = light.specular * (spec * material.specular);

    color = texture(tex, Texcoord) * vec4(ambient + diffuse + specular, 1.0);
    //color = texture(tex, Texcoord);
}
