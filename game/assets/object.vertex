#version 330 core

layout (location = 0) in vec3 position;
layout (location = 1) in vec3 normal;
layout (location = 2) in vec3 tangent;
layout (location = 3) in vec2 texcoord;

out vec3 TangentFragPosition;
out vec3 TangentViewPosition;
out vec3 TangentLightPosition;
out vec2 Texcoord;

struct Light {
    vec3 position;
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
};

uniform mat4 model;
uniform mat4 view;
uniform mat4 projection;
uniform vec3 viewPosition;
uniform Light light;

void main() {

    gl_Position = projection * view * model * vec4(position, 1.0);

    vec3 fragPosition = vec3(model * vec4(position, 1.0));
    mat3 normalMatrix = transpose(inverse(mat3(model)));

    vec3 T = normalize(vec3(normalMatrix * tangent));
    vec3 N = normalize(vec3(normalMatrix * normal));
    T = normalize(T - dot(T, N) * N);
    vec3 B = cross(T, N);

    mat3 TBN = transpose(mat3(T, B, N));
    TangentFragPosition = TBN * fragPosition;
    TangentViewPosition = TBN * viewPosition;
    TangentLightPosition = TBN * light.position;

    Texcoord = texcoord;
}

