#version 330 core
struct Material {
	sampler2D diffuse;
	sampler2D normal;
	sampler2D specular;
	float shininess;
};

struct Light {
	vec3 direction;

	vec3 ambient;
	vec3 diffuse;
	vec3 specular;
};

in VS_OUT {
	vec3 FragPosition;
	vec2 Texcoord;
	vec3 Normal;
} fs_in;

layout (location = 0) out vec4 WorldPosOut;
layout (location = 1) out vec3 ColorOut;
layout (location = 2) out vec3 NormalOut;
layout (location = 3) out vec3 TexCoordOut;

layout (location = 4) out vec3 DiffuseColorOut;
layout (location = 5) out vec4 SpecularColorOut;

uniform Material material;
uniform Light light;

const float NEAR = 0.1; // projection matrix's near plane
const float FAR = 1000.0f; // projection matrix's far plane
float LinearizeDepth(float depth)
{
    float z = depth * 2.0 - 1.0; // Back to NDC 
    return (2.0 * NEAR * FAR) / (FAR + NEAR - z * (FAR - NEAR));	
}

void main() {

	if (texture(material.diffuse, fs_in.Texcoord).a == 0.0) {
		discard;
	}

	WorldPosOut.xyz = fs_in.FragPosition;
	WorldPosOut.a = LinearizeDepth(gl_FragCoord.z);
	ColorOut = texture(material.diffuse, fs_in.Texcoord).rgb;
	NormalOut = normalize(fs_in.Normal);
	TexCoordOut = vec3(fs_in.Texcoord, 0.0);

	DiffuseColorOut = light.diffuse;
	SpecularColorOut.rgb = light.specular * texture(material.specular, fs_in.Texcoord).rgb;
	SpecularColorOut.a = material.shininess;
}
