#version 330 core

struct Material {
    sampler2D diffuse;
    sampler2D normal;
    sampler2D specular;
    float shininess;
};

struct Light {
    vec3 direction;

    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
};

in VS_OUT {
    vec3 FragPosition;
    vec2 Texcoord;
    vec3 Normal;
} fs_in;

out vec4 outColor;

uniform Material material;
uniform Light light;
uniform vec3 viewPosition;

uniform bool toggle;

const float kPi = 3.14159265;
const float kShininess = 16.0;

void main() {

    float energyConservation = (8.0 + material.shininess) / (8.0 * kPi);

    // Ambient
    vec3 ambient = light.ambient * texture(material.diffuse, fs_in.Texcoord).rgb;

    // Diffuse
    vec3 norm = normalize(fs_in.Normal);
    vec3 lightDir = normalize(-light.direction);
    float diff = max(dot(norm, lightDir), 0.0);
    vec3 diffuse = light.diffuse * diff * vec3(texture(material.diffuse, fs_in.Texcoord));

    // Specular
    vec3 viewDir = normalize(viewPosition - fs_in.FragPosition);
    vec3 halfwayDir = normalize(lightDir + viewDir);
    float spec = energyConservation * pow(max(dot(norm, halfwayDir), 0.0), material.shininess);
    vec3 specular = light.specular * spec * texture(material.specular, fs_in.Texcoord).rgb;

    if (toggle) {
	outColor = vec4(ambient + diffuse + specular, 1.0);
    } else {
	outColor = texture(material.diffuse, fs_in.Texcoord);
    }

    // Gamma correction
    float gamma = 2.2;
    outColor.rgb = pow(outColor.rgb, vec3(1.0/gamma));
}
