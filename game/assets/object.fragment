#version 150 core

in vec3 FragLocation;
in vec3 Normal;
in vec2 Texcoord;

out vec4 color;

uniform vec3 lightColor;
uniform vec3 diffuseLocation;
uniform vec3 specularLocation;
uniform sampler2D tex;

void main() {

    float ambientStrength = 0.1f;
    float specularStrength = 0.5f;

    vec3 ambient = ambientStrength * lightColor;

    vec3 norm = normalize(Normal);
    vec3 lightDir = normalize(diffuseLocation - FragLocation);
    vec3 diffuse = max(dot(norm, lightDir), 0.0) * lightColor;

    vec3 viewDir = normalize(specularLocation - FragLocation);
    vec3 reflectDir = reflect(-lightDir, norm);
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), 32);
    vec3 specular = specularStrength * spec * lightColor;

    color = texture(tex, Texcoord) * vec4(ambient + diffuse + specular, 1.0);
}
