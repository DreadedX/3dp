#version 330 core

struct Material {
    sampler2D diffuse;
    sampler2D normal;
    sampler2D specular;
    float shininess;
};

struct Light {
    vec3 position;
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
};

in vec3 TangentFragPosition;
in vec3 TangentViewPosition;
in vec3 TangentLightPosition;
in vec2 Texcoord;

out vec4 color;

uniform Material material;
uniform Light light;

void main() {

    // Ambient
    vec3 ambient = light.ambient * texture(material.diffuse, Texcoord).rgb;

    // Normal
    vec3 normal = texture(material.normal, Texcoord).rgb;
    normal = normalize(normal * 2.0 - 1.0);

    // Diffuse
    vec3 lightDir = normalize(TangentLightPosition - TangentFragPosition);
    float diff = max(dot(lightDir, normal), 0.0);
    vec3 diffuse =  light.diffuse * diff * texture(material.diffuse, Texcoord).rgb;

    // Specular (Feels kinda off with bumpmapping)
    vec3 viewDir = normalize(TangentViewPosition - TangentFragPosition);
    vec3 reflectDir = reflect(-lightDir, normal);
    vec3 halfwayDir = normalize(lightDir + viewDir);
    float spec = pow(max(dot(normal, halfwayDir), 0.0), material.shininess);
    vec3 specular = light.specular * spec * texture(material.specular, Texcoord).rgb;

    color = vec4(ambient + diffuse + specular, 1.0);
    //color = texture(material.specular, Texcoord);

    // Gamma correction
    float gamma = 2.2;
    color.rgb = pow(color.rgb, vec3(1.0/gamma));
}
